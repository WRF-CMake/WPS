steps:
- pwsh: |
    Get-CimInstance Win32_Processor | Select-Object -Property [a-z]*
    Get-CimInstance Win32_OperatingSystem | Select-Object -Property [a-z]*
    Get-CimInstance Win32_LogicalDisk
  displayName: Dump VM specs

- script: set
  displayName: Dump environment variables

# We will install the latest version later on.
- pwsh: |
    $products = Get-CimInstance -ClassName Win32_Product -Filter "Name like 'Microsoft MPI%'"
    foreach ($p in $products) {
      echo "Uninstalling $($p.Name)"
      Invoke-CimMethod -InputObject $p -MethodName Uninstall
    }
  condition: and(succeeded(), startsWith(variables.MODE, 'dm'))
  displayName: Remove existing MSMPI

- script: |
    choco install msys2 --params "/InstallDir:c:\msys64"
  displayName: Install MSYS2

- script: |
    pushd ..
    git clone --depth=100 --no-single-branch https://github.com/%WRF_REPO%.git WRF
    cd WRF
    git checkout %WRF_COMMIT%
    call .ci\appveyor\setup-dependencies.bat
    call .ci\appveyor\install-wrf.bat
  displayName: Install dependencies & WRF

- script: call .ci\appveyor\install-wps.bat
  displayName: Install WPS

- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'

- script: |
    git clone --depth=1 --branch=%WATS_BRANCH% https://github.com/$WATS_REPO.git wats
    pip install -r wats/requirements.txt
  displayName: Install WATS

- pwsh: |
    if ($Env:MODE.StartsWith("dm")) { $mpi_flag="--mpi" }
    if ($Env:BUILD_SYSTEM -eq "cmake") { $dir_suffix="build/install" }
    python wats/wats/main.py run --mode $Env:WATS_MODE --wrf-dir ../WRF/$dir_suffix --wps-dir ./$dir_suffix --work-dir wats_work $mpi_flag
  displayName: Run WATS

#- task: PublishPipelineArtifact@0
#  displayName: Publish binaries
#  inputs:
#    artifactName: binaries_$(OS_NAME)_$(BUILD_SYSTEM)_$(BUILD_TYPE)_$(MODE)
#    targetPath: build/install/main

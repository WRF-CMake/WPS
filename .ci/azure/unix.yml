steps:
- script: |
    if [[ $OS_NAME == 'osx' ]]; then
      sw_vers
      top -l 1 -s 0 | grep PhysMem
      sysctl hw
      df -h
    else
      lsb_release -a
      free -m
      lscpu
      df -h --total
    fi
  displayName: Dump VM specs

- script: printenv
  displayName: Dump environment variables

- script: |
    set -e
    cd ..
    git clone --depth=100 --no-single-branch https://github.com/$WRF_REPO.git WRF
    cd WRF
    git checkout $WRF_COMMIT
    git log --oneline -n 1
  displayName: Download WRF

- script: ../WRF/.ci/azure/scripts/setup-dependencies.sh
  displayName: Setup dependencies

- script: ../WRF/.ci/azure/scripts/install-wrf.sh
  displayName: Install WRF

- script: .ci/azure/scripts/install-wps.sh
  displayName: Install WPS

- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'

- script: |
    git clone --depth=1 --branch=$WATS_BRANCH https://github.com/$WATS_REPO.git wats
    pip install -r wats/requirements.txt
  displayName: Install WATS

- script: |
    if [[ $MODE == dm* ]]; then mpi_flag=--mpi ; fi
    if [[ $BUILD_SYSTEM == cmake ]]; then dir_suffix=build/install ; fi
    python wats/wats/main.py run --mode $WATS_MODE --wrf-dir ../WRF/$dir_suffix --wps-dir ./$dir_suffix --work-dir wats_work $mpi_flag
  displayName: Run WATS

- task: PublishBuildArtifacts@1
  displayName: Store WATS outputs
  inputs:
    pathtoPublish: wats_work/output
    artifactName: wats_$(OS_NAME)_$(BUILD_SYSTEM)_$(BUILD_TYPE)_$(MODE)

#- task: PublishPipelineArtifact@0
#  displayName: Store WATS outputs
#  inputs:
#    artifactName: wats_$(OS_NAME)_$(BUILD_SYSTEM)_$(BUILD_TYPE)_$(MODE)
#    targetPath: wats_work
